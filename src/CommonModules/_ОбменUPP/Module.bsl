#Область Выгрузка

#Область Выгрузка_Пассивная

Функция Пинг(Запрос) Экспорт

	Возврат ОтветHTTP(200, НСтр("ru='Подключение установлено! теперь пробуй обмен'"));

КонецФункции

Функция ОтправитьДанные(Запрос) Экспорт

	Ответ = ОтветHTTP(500);
	Данные = Неопределено;
	Узел = ПланыОбмена._ОбменUPP.ПустаяСсылка();

	Если Не ПроверитьHTTPСервисЗапрос(Запрос, Ответ, Данные, Узел) Тогда
		Возврат Ответ;
	КонецЕсли;

	Возврат ОтветHTTP(200, ДанныеДляОбмена(Узел));

КонецФункции

Функция ПодтвердитьОтправкуДанных(Запрос) Экспорт

	Ответ = ОтветHTTP(500);
	Данные = Неопределено;
	Узел = ПланыОбмена._ОбменUPP.ПустаяСсылка();

	Если Не ПроверитьHTTPСервисЗапрос(Запрос, Ответ, Данные, Узел) Тогда
		Возврат Ответ;
	КонецЕсли;

	ПодтвердитьОтправкуДанныхПоСтруктуре(Узел, Данные, Ответ);

	Возврат Ответ;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДанныеДляОбмена

Функция ДанныеДляОбмена(Узел) Экспорт

	Структура = Новый Структура;
	Структура.Вставить(ИмяКодУзла(), ПланыОбмена._ОбменUPP.ЭтотУзел().Код);
	Структура.Вставить("Номенклатура", МассивНоменклатуры(Узел));
	Если ЕстьДанныеДляОбмена(Структура) Тогда
		ДанныеДляОбмена = Структура;
	Иначе
		ДанныеДляОбмена = Новый Структура;
	КонецЕсли;

	Возврат ДанныеДляОбмена;

КонецФункции

Функция ЕстьДанныеДляОбмена(Структура)

	ЕстьДанныеДляОбмена = Ложь;

	Для Каждого Элемент Из Структура Цикл

		Если Элемент.Ключ = ИмяКодУзла() Тогда
			Продолжить;
		КонецЕсли;

		Если Не Элемент.Значение.Количество() = 0 Тогда

			ЕстьДанныеДляОбмена = Истина;

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьДанныеДляОбмена;

КонецФункции

#Область ПодтвердитьОтправкуДанных

Процедура ПодтвердитьОтправкуДанныхПоСтруктуре(Узел, Данные, Ответ)

	Ответ = ОтветHTTP(200, НСтр("ru='Обмен завершен.'"));

КонецПроцедуры

#КонецОбласти

Функция МассивНоменклатуры(Узел, МассивОбъектов = Неопределено)

	Возврат Новый Массив;

КонецФункции

#КонецОбласти

#Область Загрузка

#Область Загрузка_Пассивная

Процедура Пинг_Запрос(Узел) Экспорт

	ТекстОтвета = ЗапросHTTP_GET(Узел, "/Ping");

	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОтвета);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Загрузка_Активная

Функция ЗагрузитьДанные(Запрос) Экспорт

	Ответ = ОтветHTTP(500);
	Данные = Неопределено;
	Узел = ПланыОбмена._ОбменUPP.ПустаяСсылка();

	Если Не ПроверитьHTTPСервисЗапрос(Запрос, Ответ, Данные, Узел) Тогда
		Возврат Ответ;
	КонецЕсли;

	ОбработатьЗагруженныеДанные_ИсточникАктивный(Узел, Данные, Ответ);

	Возврат Ответ;

КонецФункции

Процедура ОбработатьЗагруженныеДанные_ИсточникАктивный(Узел, Данные, Ответ) Экспорт

	СтруктураОтчета = СтруктураОтчетаЗагрузкиПоУмолчанию();

	ЗагрузитьИзСтруктуры(Данные, Истина, СтруктураОтчета, Узел);

	Ответ = ОтветHTTP(200, СтруктураОтчета);

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных

Процедура ЗагрузитьИзСтруктуры(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел)

	ТекстОшибки = "";

	Для Каждого Элемент Из Данные Цикл

		Если Элемент.Ключ = "КодУзла" Тогда
			Продолжить;
		КонецЕсли;
		
		//@skip-warning
		ДанныеКЗагрузке = Элемент.Значение;
		СтруктураОтчетаЗагрузки.Вставить(Элемент.Ключ, Новый Массив);
		ИмяМетодаЗагрузки = СтрЗаменить("Загрузить_%1%(ДанныеКЗагрузке, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, 
										|ТекстОшибки);", "%1%", Элемент.Ключ);

		Выполнить (ИмяМетодаЗагрузки);

	КонецЦикла;

	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Справочники

Функция ЗначениеПеречисления(Значение, Менеджер)

	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;

	Возврат Менеджер[Значение];

КонецФункции

Функция НайтиСоздатьПростойЭлементСправочника(СтруктураПараметров, ИмяСвойства, Менеджер)

	Если Не ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]) Или ЭтоПустойУИД(СтруктураПараметров[ИмяСвойства]) Тогда
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;

	ЭлементСправочника = НайтиСсылкуПоGUID(СтруктураПараметров[ИмяСвойства], Менеджер);

	Если Не ОбщегоНазначения.СсылкаСуществует(ЭлементСправочника) Тогда
			//@skip-warning
		Если СтрНайти(ИмяСвойства, "Родитель") = 0 Тогда
			ЭлементОбъект = Менеджер.СоздатьЭлемент();
		Иначе
			ЭлементОбъект = Менеджер.СоздатьГруппу();
		КонецЕсли;
		ЭлементОбъект.УстановитьСсылкуНового(ЭлементСправочника);
		ЗаполнитьЗначенияСвойств(ЭлементОбъект, СтруктураПараметров);
		ЭлементОбъект.Наименование = СтруктураПараметров[СтрШаблон("%1_Наименование", ИмяСвойства)];
		ЗаписатьСправочник(ЭлементОбъект);
		ЭлементСправочника = ЭлементОбъект.Ссылка;
	КонецЕсли;

	Возврат ЭлементСправочника;

КонецФункции

Процедура ЗаписатьСправочник(СправочникОбъект, ТекстОшибки = "", Отказ = Ложь)

	Попытка
		СправочникОбъект.Записать();
		Если СправочникОбъект.ОбменДанными.Загрузка 
		И Не ЗначениеЗаполнено(СправочникОбъект.Код) Тогда
			СправочникОбъект.ОбменДанными.Загрузка = Ложь;
			СправочникОбъект.Записать();
		КонецЕсли;
	Исключение
		Отказ = Истина;
		_ОбменUPPВызовСервера.ДобавитьСтрокуВТекст(ТекстОшибки, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#Область Номенклатура

//@skip-warning
Процедура Загрузить_Номенклатура(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, ТекстОшибки)

	МассивОтчетаЗагрузки = СтруктураОтчетаЗагрузки.Номенклатура;
	Отказ = Ложь;

	Для Каждого СтруктураПараметров Из Данные Цикл

		ЗагрузитьЭлементНоменклатуры(СтруктураПараметров, МассивОтчетаЗагрузки, СтруктураОтчетаЗагрузки, ТекстОшибки,
			Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьЭлементНоменклатуры(СтруктураПараметров, МассивОтчетаЗагрузки, СтруктураОтчетаЗагрузки, ТекстОшибки,
	Отказ)

	НоменклатураОбъект = НайтиСоздатьОбъектПоGUID(СтруктураПараметров.Ссылка, Справочники.Номенклатура);
	ЗаполнитьЗначенияСвойств(НоменклатураОбъект, СтруктураПараметров);
	НоменклатураОбъект.Родитель = НайтиСоздатьПростойЭлементСправочника(СтруктураПараметров, "Родитель",
		Справочники.Номенклатура);
	НоменклатураОбъект.ВидНоменклатуры = НайтиСоздать_ВидНоменклатуры(СтруктураПараметров);
	НоменклатураОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	НоменклатураОбъект.ЕдиницаИзмерения = НайтиЕдиницуИзменения(СтруктураПараметров.ЕдиницаИзмерения);
	ВидНоменклатурыПриИзмененииНаСервере(НоменклатураОбъект);
	ЗаписатьСправочник(НоменклатураОбъект, ТекстОшибки, Отказ);

	МассивОтчетаЗагрузки.Добавить(СтруктураЭлементыОтчета("Номенклатура", СтруктураПараметров, ТекстОшибки, Отказ));

КонецПроцедуры

Процедура ВидНоменклатурыПриИзмененииНаСервере(ОбъектНоменклатуры)

	ПараметрыСозданияСтруктура = Новый Структура;
	ПараметрыСозданияСтруктура.Вставить("Наименование", "");
	ПараметрыСозданияСтруктура.Вставить("НаименованиеПолное", "");
	ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);

	РеквизитыВидаНоменклатуры = ОбновитьКешРеквизитовВидаНоменклатуры(ОбъектНоменклатуры.ВидНоменклатуры);
	
	//@skip-warning
	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(ОбъектНоменклатуры, Ложь, Ложь,
		Справочники.ВидыНоменклатуры.ПустаяСсылка(), Ложь);

	Если ЗначениеЗаполнено(ОбъектНоменклатуры.ВидНоменклатуры) Тогда

		Если ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры) Тогда
			ОбъектНоменклатуры.Наименование = "";
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСоздания.Наименование) Тогда
			// После обратного переключения на вид номенклатуры без шаблона возвращаем исходное наименование.
			ОбъектНоменклатуры.Наименование = ПараметрыСоздания.Наименование;
		КонецЕсли;

		Если ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры) Тогда
			ОбъектНоменклатуры.НаименованиеПолное = "";
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСоздания.НаименованиеПолное) Тогда
			// После обратного переключения на вид номенклатуры без шаблона возвращаем исходное наименование.
			ОбъектНоменклатуры.НаименованиеПолное = ПараметрыСоздания.НаименованиеПолное;
		КонецЕсли;

	КонецЕсли;

	ИспользуетсяИндивидуальныйШаблонЦенника  = ЗначениеЗаполнено(ОбъектНоменклатуры.ШаблонЦенника)
		И (ОбъектНоменклатуры.ШаблонЦенника <> РеквизитыВидаНоменклатуры.ШаблонЦенника);
	ИспользуетсяИндивидуальныйШаблонЭтикетки = ЗначениеЗаполнено(ОбъектНоменклатуры.ШаблонЭтикетки)
		И (ОбъектНоменклатуры.ШаблонЭтикетки <> РеквизитыВидаНоменклатуры.ШаблонЭтикетки);

	ОбъектНоменклатуры.ИспользоватьИндивидуальныйШаблонЦенника  = ИспользуетсяИндивидуальныйШаблонЦенника;
	ОбъектНоменклатуры.ИспользоватьИндивидуальныйШаблонЭтикетки = ИспользуетсяИндивидуальныйШаблонЭтикетки;

	ОбъектНоменклатуры.ШаблонЦенника  = ?(ИспользуетсяИндивидуальныйШаблонЦенника, ОбъектНоменклатуры.ШаблонЦенника,
		Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	ОбъектНоменклатуры.ШаблонЭтикетки = ?(ИспользуетсяИндивидуальныйШаблонЭтикетки, ОбъектНоменклатуры.ШаблонЭтикетки,
		Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());

КонецПроцедуры

Функция ОбновитьКешРеквизитовВидаНоменклатуры(ВидНоменклатуры)

	ИменаРеквизитов =
	"ШаблонРабочегоНаименованияНоменклатуры,
	|ЗапретРедактированияРабочегоНаименованияНоменклатуры,
	|ШаблонНаименованияДляПечатиНоменклатуры,
	|ЗапретРедактированияНаименованияДляПечатиНоменклатуры,
	|НастройкаИспользованияСерий,
	|СодержитДрагоценныеМатериалы,
	|ИспользованиеХарактеристик,
	|ИспользоватьСерии,
	|ИспользоватьСрокГодностиСерии,
	|НаборУпаковок,
	|ГруппаДоступа,
	|НаборСвойств,
	|ТипНоменклатуры,
	|ШаблонЦенника,
	|ШаблонЭтикетки";
	Возврат Новый ФиксированнаяСтруктура(ОбщегоНазначенияУТ.ЗначенияРеквизитовОбъектаПоУмолчанию(ВидНоменклатуры,
		ИменаРеквизитов));

КонецФункции

Функция НайтиЕдиницуИзменения(ЕдиницаИзмерения)

	Код =  СтрЗаменить(СтрЗаменить(СокрЛП(ЕдиницаИзмерения), ".", ""), ",", "");

	Возврат Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(Код);

КонецФункции

Функция НайтиСоздать_ВидНоменклатуры(СтруктураПараметров)

	ВидНоменклатуры = НайтиСсылкуПоGUID(СтруктураПараметров.ВидНоменклатуры, Справочники.ВидыНоменклатуры);

	Если Не ОбщегоНазначения.СсылкаСуществует(ВидНоменклатуры) Тогда
			//@skip-warning
		ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		ВидНоменклатурыОбъект.УстановитьСсылкуНового(ВидНоменклатуры);
		ВидНоменклатурыОбъект.Наименование = СтруктураПараметров.ВидНоменклатуры_Наименование;
		ВидНоменклатурыОбъект.ТипНоменклатуры = ЗначениеПеречисления(
			СтруктураПараметров.ВидНоменклатуры_ТипНоменклатуры, Перечисления.ТипыНоменклатуры);
		ВидНоменклатурыОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		ВидНоменклатурыОбъект.Записать();
		ВидНоменклатуры = ВидНоменклатурыОбъект.Ссылка;
	КонецЕсли;

	Возврат ВидНоменклатуры;

КонецФункции

#КонецОбласти

#Область ФизическиеЛица

//@skip-warning
Процедура Загрузить_ФизическиеЛица(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, ТекстОшибки)

	МассивОтчетаЗагрузки = СтруктураОтчетаЗагрузки.ФизическиеЛица;
	Отказ = Ложь;

	Для Каждого СтруктураПараметров Из Данные Цикл

		ЗагрузитьЭлементФизическиеЛица(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьЭлементФизическиеЛица(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ)

	ФизЛицоОбъект = НайтиСоздатьОбъектПоGUID(СтруктураПараметров.Ссылка, Справочники.ФизическиеЛица);
	ЗаполнитьЗначенияСвойств(ФизЛицоОбъект, СтруктураПараметров);
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаРождения) Тогда
		ФизЛицоОбъект.ДатаРождения = Дата(СтруктураПараметров.ДатаРождения);
	КонецЕсли;
	ФизЛицоОбъект.Родитель = НайтиСоздатьПростойЭлементСправочника(СтруктураПараметров, "Родитель",
		Справочники.Номенклатура);
	ФизЛицоОбъект.Пол = ЗначениеПеречисления(СтруктураПараметров.Пол, Перечисления.ПолФизическогоЛица);
	ФизЛицоОбъект.ЛьготаПриНачисленииПособий = ЗначениеПеречисления(СтруктураПараметров.ЛьготаПриНачисленииПособий,
		Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом);

	ЗаписатьСправочник(ФизЛицоОбъект, ТекстОшибки, Отказ);
	ЗаполнитьДополнительныеДанныеПоФизЛицу(ФизЛицоОбъект.Ссылка, СтруктураПараметров);

	МассивОтчетаЗагрузки.Добавить(СтруктураЭлементыОтчета("ФизическиеЛица", СтруктураПараметров, ТекстОшибки, Отказ));

КонецПроцедуры

Процедура ЗаполнитьДополнительныеДанныеПоФизЛицу(ФизЛицо, СтруктураПараметров)

	ВидДокумента = НайтиПоЗначениюРеквизита(СтруктураПараметров.ВидДокумента, "КодМВД", Справочники.ВидыДокументовФизическихЛиц);

	Если Не ЗначениеЗаполнено(ВидДокумента) Или Не ЗначениеЗаполнено(СтруктураПараметров.ПериодЗаписиДокумента) Тогда
		Возврат;
	КонецЕсли;

	МЗ = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ, СтруктураПараметров);
	МЗ.Период = Дата(СтруктураПараметров.ПериодЗаписиДокумента);
	МЗ.Физлицо = ФизЛицо;
	МЗ.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
	МЗ.ВидДокумента = ВидДокумента;
	МЗ.Записать();

КонецПроцедуры

#КонецОбласти

#Область СотрудникиОрганизаций

//@skip-warning
Процедура Загрузить_СотрудникиОрганизаций(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, ТекстОшибки)

	МассивОтчетаЗагрузки = СтруктураОтчетаЗагрузки.СотрудникиОрганизаций;
	Отказ = Ложь;

	Для Каждого СтруктураПараметров Из Данные Цикл

		ЗагрузитьЭлементСотрудникиОрганизаций(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьЭлементСотрудникиОрганизаций(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ)

	СотрудникОбъект = НайтиСоздатьОбъектПоGUID(СтруктураПараметров.Ссылка, Справочники.Сотрудники);
	//ЗаполнитьЗначенияСвойств(СотрудникОбъект, СтруктураПараметров);
	СотрудникОбъект.Наименование = СтруктураПараметров.Наименование;
	СотрудникОбъект.ФизическоеЛицо = НайтиСсылкуПоGUID(СтруктураПараметров.ФизическоеЛицо, Справочники.ФизическиеЛица);
	СотрудникОбъект.ГоловнаяОрганизация = НайтиСсылкуПоGUID(СтруктураПараметров.ГоловнаяОрганизация,
		Справочники.Организации);
	ЗаписатьСправочник(СотрудникОбъект, ТекстОшибки, Отказ);

	МассивОтчетаЗагрузки.Добавить(СтруктураЭлементыОтчета("СотрудникиОрганизаций", СтруктураПараметров, ТекстОшибки,
		Отказ));

КонецПроцедуры

#КонецОбласти

#Область Организации

//@skip-warning
Процедура Загрузить_Организации(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, ТекстОшибки)

	МассивОтчетаЗагрузки = СтруктураОтчетаЗагрузки.Организации;
	Отказ = Ложь;

	Для Каждого СтруктураПараметров Из Данные Цикл

		ЗагрузитьЭлементОрганизации(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьЭлементОрганизации(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ)

	ОрганизацияОбъект = НайтиСоздатьОбъектПоGUID(СтруктураПараметров.Ссылка, Справочники.Организации);
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, СтруктураПараметров);
	ОрганизацияОбъект.ЮрФизЛицо = ЗначениеПеречисления(СтруктураПараметров.ЮрФизЛицо, Перечисления.ЮрФизЛицо);
	ЗаписатьСправочник(ОрганизацияОбъект, ТекстОшибки, Отказ);

	МассивОтчетаЗагрузки.Добавить(СтруктураЭлементыОтчета("Организации", СтруктураПараметров, ТекстОшибки, Отказ));

КонецПроцедуры

#КонецОбласти

#Область ХарактеристикиНоменклатуры

//@skip-warning
Процедура Загрузить_ХарактеристикиНоменклатуры(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, ТекстОшибки)

	МассивОтчетаЗагрузки = СтруктураОтчетаЗагрузки.ХарактеристикиНоменклатуры;
	Отказ = Ложь;

	Для Каждого СтруктураПараметров Из Данные Цикл

		ЗагрузитьЭлементХарактеристикиНоменклатуры(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьЭлементХарактеристикиНоменклатуры(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ)

	ХарактеристикаОбъект = НайтиСоздатьОбъектПоGUID(СтруктураПараметров.Ссылка, Справочники.ХарактеристикиНоменклатуры);
	ЗаполнитьЗначенияСвойств(ХарактеристикаОбъект, СтруктураПараметров);
	ХарактеристикаОбъект.Владелец = НайтиСсылкуПоGUID(СтруктураПараметров.Владелец, Справочники.Номенклатура);
	ЗаписатьСправочник(ХарактеристикаОбъект, ТекстОшибки, Отказ);

	МассивОтчетаЗагрузки.Добавить(СтруктураЭлементыОтчета("ХарактеристикиНоменклатуры", СтруктураПараметров,
		ТекстОшибки, Отказ));

КонецПроцедуры

#КонецОбласти

#Область ДолжностиОрганизаций

//@skip-warning
Процедура Загрузить_ДолжностиОрганизаций(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, ТекстОшибки)

	МассивОтчетаЗагрузки = СтруктураОтчетаЗагрузки.ДолжностиОрганизаций;
	Отказ = Ложь;

	Для Каждого СтруктураПараметров Из Данные Цикл

		ЗагрузитьЭлементДолжностиОрганизаций(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьЭлементДолжностиОрганизаций(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ)

	ДолжностьОбъект = НайтиСоздатьОбъектПоGUID(СтруктураПараметров.Ссылка, Справочники.Должности);
	ЗаполнитьЗначенияСвойств(ДолжностьОбъект, СтруктураПараметров);
	ДолжностьОбъект.КатегорияВоинскогоУчета = ЗначениеПеречисления(СтруктураПараметров.КатегорияВоинскогоУчета,
		Перечисления.КатегорииДолжностейДляВоинскогоУчета);
	ДолжностьОбъект.ВведенаВШтатноеРасписание = Истина;
	ДолжностьОбъект.ДатаВвода = ТекущаяДатаСеанса();
	ЗаписатьСправочник(ДолжностьОбъект, ТекстОшибки, Отказ);

	МассивОтчетаЗагрузки.Добавить(СтруктураЭлементыОтчета("ДолжностиОрганизаций", СтруктураПараметров, ТекстОшибки,
		Отказ));

КонецПроцедуры

#КонецОбласти

#Область ПодразделенияОрганизации

//@skip-warning
Процедура Загрузить_ПодразделенияОрганизаций(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, ТекстОшибки)

	МассивОтчетаЗагрузки = СтруктураОтчетаЗагрузки.ПодразделенияОрганизаций;
	Отказ = Ложь;

	Для Каждого СтруктураПараметров Из Данные Цикл

		ЗагрузитьЭлементПодразделенияОрганизаций(СтруктураПараметров, Данные, МассивОтчетаЗагрузки, ТекстОшибки, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьЭлементПодразделенияОрганизаций(СтруктураПараметров, Данные, МассивОтчетаЗагрузки, ТекстОшибки, Отказ)

	ПодразделениеОбъект = НайтиСоздатьОбъектПоGUID(СтруктураПараметров.Ссылка, Справочники.ПодразделенияОрганизаций);
	ЗаполнитьЗначенияСвойств(ПодразделениеОбъект, СтруктураПараметров);
	ПодразделениеОбъект.Сформировано = Не СтруктураПараметров.ПометкаУдаления;
	ПодразделениеОбъект.Владелец = НайтиСсылкуПоGUID(СтруктураПараметров.Владелец, Справочники.Организации);
	ПодразделениеОбъект.Родитель = НайтиСсылкуПоGUID(СтруктураПараметров.Родитель, Справочники.ПодразделенияОрганизаций);
	Если ЗначениеЗаполнено(СтруктураПараметров.Родитель) И Не ОбщегоНазначения.СсылкаСуществует(
		ПодразделениеОбъект.Родитель) Тогда
		ДанныеРодителя = НайтиСтруктураПоЗначение(Данные, "Ссылка", СтруктураПараметров.Родитель);
		Если ДанныеРодителя <> Неопределено Тогда
			ЗагрузитьЭлементПодразделенияОрганизаций(ДанныеРодителя, Данные, МассивОтчетаЗагрузки, ТекстОшибки, Отказ);
			ПодразделениеОбъект.Родитель = НайтиСсылкуПоGUID(СтруктураПараметров.Родитель,
				Справочники.ПодразделенияОрганизаций);
		КонецЕсли;
	КонецЕсли;
	ЗаписатьСправочник(ПодразделениеОбъект, ТекстОшибки, Отказ);

	МассивОтчетаЗагрузки.Добавить(СтруктураЭлементыОтчета("ПодразделенияОрганизаций", СтруктураПараметров, ТекстОшибки,
		Отказ));

КонецПроцедуры

#КонецОбласти

#Область ГрафикиРаботыСотрудников

//@skip-warning
Процедура Загрузить_ГрафикиРаботы(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, ТекстОшибки)

	МассивОтчетаЗагрузки = СтруктураОтчетаЗагрузки.ГрафикиРаботы;
	Отказ = Ложь;

	Для Каждого СтруктураПараметров Из Данные Цикл

		ЗагрузитьЭлементГрафикиРаботы(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьЭлементГрафикиРаботы(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ)

	ГрафикРаботыОбъект = НайтиСоздатьОбъектПоGUID(СтруктураПараметров.Ссылка, Справочники.ГрафикиРаботыСотрудников);
	ЗаполнитьЗначенияСвойств(ГрафикРаботыОбъект, СтруктураПараметров);
	ГрафикРаботыОбъект.ДатаОтсчета = Дата(СтруктураПараметров.ДатаОтсчета);
	ГрафикРаботыОбъект.ПроизводственныйКалендарь = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ");
	ЗаписатьСправочник(ГрафикРаботыОбъект, ТекстОшибки, Отказ);

	МассивОтчетаЗагрузки.Добавить(СтруктураЭлементыОтчета("ГрафикиРаботы", СтруктураПараметров, ТекстОшибки, Отказ));

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Документы

Процедура ЗаписатьДокумент(Документ, СтруктураПараметров, ТекстОшибки, Отказ)

	Документ.ДополнительныеСвойства.Вставить("ПроверкаУтвержденияОтключена", Истина);

	Попытка

		Документ.Записать();
		Если СтруктураПараметров.Проведен Тогда
			Документ.ОбменДанными.Загрузка = Ложь;
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли Документ.ОбменДанными.Загрузка И Не ЗначениеЗаполнено(Документ.Код) Тогда
			Документ.ОбменДанными.Загрузка = Ложь;
			Документ.Записать();
		КонецЕсли;

	Исключение

		Документ.Записать();
		Отказ = Истина;
		_ОбменUPPВызовСервера.ДобавитьСтрокуВТекст(ТекстОшибки, ОписаниеОшибки());

	КонецПопытки;

КонецПроцедуры

#Область ПриемНаРаботуВОрганизацию

//@skip-warning
Процедура Загрузить_ПриемНаРаботуВОрганизацию(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, ТекстОшибки)

	МассивОтчетаЗагрузки = СтруктураОтчетаЗагрузки.ПриемНаРаботуВОрганизацию;
	Отказ = Ложь;

	Для Каждого СтруктураПараметров Из Данные Цикл

		ЗагрузитьЭлементПриемНаРаботуВОрганизацию(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьЭлементПриемНаРаботуВОрганизацию(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ)

	СтруктураПараметров.Вставить("ДатаСоздания", ТекущаяДатаСеанса());

	ПриемНаРаботуСпискомОбъект = НайтиСоздатьОбъектПоGUID(СтруктураПараметров.Ссылка, Документы.ПриемНаРаботуСписком);
	ЗаполнитьЗначенияСвойств(ПриемНаРаботуСпискомОбъект, СтруктураПараметров);
	ПриемНаРаботуСпискомОбъект.НачисленияУтверждены = Истина;
	ПриемНаРаботуСпискомОбъект.Дата = Дата(СтруктураПараметров.Дата);
	ПриемНаРаботуСпискомОбъект.ДатаСобытия = ПриемНаРаботуСпискомОбъект.Дата;
	ПриемНаРаботуСпискомОбъект.БронированиеПозиции = Ложь;
	ПриемНаРаботуСпискомОбъект.Организация = НайтиСсылкуПоGUID(СтруктураПараметров.Организация, Справочники.Организации);
	
	ЗаполнитьТабличныеЧасти_ПриемаНаРаботу(ПриемНаРаботуСпискомОбъект, СтруктураПараметров);
	
	ЗаписатьДокумент(ПриемНаРаботуСпискомОбъект, СтруктураПараметров, ТекстОшибки, Отказ);

	МассивОтчетаЗагрузки.Добавить(СтруктураЭлементыОтчета("ПриемНаРаботуВОрганизацию", СтруктураПараметров,
		ТекстОшибки, Отказ));

КонецПроцедуры

Процедура ЗаполнитьТабличныеЧасти_ПриемаНаРаботу(ДокументОбъект, СтруктураПараметров)

	ДокументОбъект.Сотрудники.Очистить();
	ДокументОбъект.Начисления.Очистить();
	ДокументОбъект.УправленческиеНачисления.Очистить();
	ДокументОбъект.ЕжегодныеОтпуска.Очистить();
	ДокументОбъект.Показатели.Очистить();

	Для Каждого СтруктураРаботника Из СтруктураПараметров.РаботникиОрганизации Цикл

		НоваяСтрока = ДокументОбъект.Сотрудники.Добавить();
		НоваяСтрока.ИдентификаторСтрокиСотрудника = СтруктураРаботника.НомерСтроки;
		НоваяСтрока.ВидЗанятости = ЗначениеПеречисления(СтруктураПараметров.ВидЗанятости, Перечисления.ВидыЗанятости);
		Если Не ЗначениеЗаполнено(НоваяСтрока.ВидЗанятости) Тогда
			НоваяСтрока.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
		КонецЕсли;
		НоваяСтрока.СпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца;
		НоваяСтрока.Сотрудник = НайтиСсылкуПоGUID(СтруктураРаботника.Сотрудник, Справочники.Сотрудники);
		НоваяСтрока.ДатаПриема = Дата(СтруктураРаботника.ДатаПриема);
		НоваяСтрока.ФизическоеЛицо = НайтиСсылкуПоGUID(СтруктураРаботника.ФизическоеЛицо, Справочники.ФизическиеЛица);
		НоваяСтрока.Подразделение = НайтиСсылкуПоGUID(СтруктураРаботника.Подразделение,
			Справочники.ПодразделенияОрганизаций);
		НоваяСтрока.Должность = НайтиСсылкуПоGUID(СтруктураРаботника.Должность, Справочники.Должности);
		НоваяСтрока.ДолжностьПоШтатномуРасписанию = НайтиСоздатьШтатноеРасписание(ДокументОбъект.Дата,
			ДокументОбъект.Организация, НоваяСтрока.Должность, НоваяСтрока.Подразделение,
			СтруктураРаботника.КоличествоСтавок);
		НоваяСтрока.ГрафикРаботы = НайтиСсылкуПоGUID(СтруктураРаботника.ГрафикРаботы,
			Справочники.ГрафикиРаботыСотрудников);
		НоваяСтрока.КоличествоСтавок = СтруктураРаботника.КоличествоСтавок;

		НоваяСтрока = ДокументОбъект.ЕжегодныеОтпуска.Добавить();
		НоваяСтрока.ИдентификаторСтрокиСотрудника = СтруктураРаботника.НомерСтроки;
		НоваяСтрока.ВидЕжегодногоОтпуска = Справочники.ВидыОтпусков.Основной;
		НоваяСтрока.КоличествоДнейВГод = КоличествоДнейВГод();

	КонецЦикла;

	Для Каждого СтрокаНачисления Из СтруктураПараметров.Начисления Цикл

		Начисление = НайтиПоЗначениюРеквизита(СтрокаНачисления.ВидРасчета, "Код", ПланыВидовРасчета.Начисления);
		
		НоваяСтрока = ДокументОбъект.Начисления.Добавить();
		НоваяСтрока.ИдентификаторСтрокиСотрудника = СтрокаНачисления.НомерСтроки;
		НоваяСтрока.ИдентификаторСтрокиВидаРасчета = СтрокаНачисления.НомерСтроки;
		НоваяСтрока.Начисление = Начисление;
		НоваяСтрока.Размер = СтрокаНачисления.Размер;

		НоваяСтрока = ДокументОбъект.УправленческиеНачисления.Добавить();
		НоваяСтрока.ИдентификаторСтрокиСотрудника = СтрокаНачисления.НомерСтроки;
		НоваяСтрока.ИдентификаторСтрокиВидаРасчета = СтрокаНачисления.НомерСтроки;
		НоваяСтрока.Начисление = Начисление;
		НоваяСтрока.Размер = СтрокаНачисления.Размер;

		НоваяСтрока = ДокументОбъект.Показатели.Добавить();
		НоваяСтрока.ИдентификаторСтрокиСотрудника = СтрокаНачисления.НомерСтроки;
		НоваяСтрока.ИдентификаторСтрокиВидаРасчета = СтрокаНачисления.НомерСтроки;
		НоваяСтрока.Показатель = Справочники.ПоказателиРасчетаЗарплаты.Оклад;
		НоваяСтрока.Значение = СтрокаНачисления.Размер;

	КонецЦикла;

КонецПроцедуры

Функция НайтиСоздатьШтатноеРасписание(Дата, Организация, Должность, Подразделение, КоличествоСтавок)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ШтатноеРасписание.Ссылка
				   |ИЗ
				   |	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
				   |ГДЕ
				   |	ШтатноеРасписание.Должность = &Должность
				   |и ШтатноеРасписание.Подразделение = &Подразделение
				   |и ШтатноеРасписание.Владелец = &Организация";

	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Организация", Организация);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		ШтатноеРасписание = Выборка.Ссылка;

	Иначе

		ШтатноеРасписаниеОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
		ШтатноеРасписаниеОбъект.Наименование = СтрШаблон("%1; %2", Подразделение, Должность);
		ШтатноеРасписаниеОбъект.Владелец = Организация;
		ШтатноеРасписаниеОбъект.Подразделение = Подразделение;
		ШтатноеРасписаниеОбъект.Должность = Должность;
		ШтатноеРасписаниеОбъект.КоличествоСтавок = КоличествоСтавок;
		ШтатноеРасписаниеОбъект.Утверждена = Истина;
		ШтатноеРасписаниеОбъект.ДатаУтверждения = Дата;
		ШтатноеРасписаниеОбъект.Записать();
		ШтатноеРасписание = ШтатноеРасписаниеОбъект.Ссылка;

	КонецЕсли;

	Возврат ШтатноеРасписание;

КонецФункции

#КонецОбласти

#Область УвольнениеИзОрганизаций
 
//@skip-warning
Процедура Загрузить_УвольнениеИзОрганизаций(Данные, Перезаписывать, СтруктураОтчетаЗагрузки, Узел, ТекстОшибки)

	МассивОтчетаЗагрузки = СтруктураОтчетаЗагрузки.УвольнениеИзОрганизаций;
	Отказ = Ложь;

	Для Каждого СтруктураПараметров Из Данные Цикл

		ЗагрузитьЭлементУвольнениеИзОрганизаций(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьЭлементУвольнениеИзОрганизаций(СтруктураПараметров, МассивОтчетаЗагрузки, ТекстОшибки, Отказ)

	УвольнениеСпискомОбъект = НайтиСоздатьОбъектПоGUID(СтруктураПараметров.Ссылка, Документы.УвольнениеСписком);
	ЗаполнитьЗначенияСвойств(УвольнениеСпискомОбъект, СтруктураПараметров);
	УвольнениеСпискомОбъект.ПериодРегистрации = Дата(СтруктураПараметров.Дата);
	УвольнениеСпискомОбъект.ДатаСобытия = УвольнениеСпискомОбъект.Дата;
	УвольнениеСпискомОбъект.Организация = НайтиСсылкуПоGUID(СтруктураПараметров.Организация, Справочники.Организации);
	УвольнениеСпискомОбъект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	УвольнениеСпискомОбъект.ПланируемаяДатаВыплаты = УвольнениеСпискомОбъект.Дата;
	УвольнениеСпискомОбъект.ДокументРассчитан = Истина;
	
	ЗаполнитьТабличныеЧасти_Увольнение(УвольнениеСпискомОбъект, СтруктураПараметров);
	
	ЗаписатьДокумент(УвольнениеСпискомОбъект, СтруктураПараметров, ТекстОшибки, Отказ);

	МассивОтчетаЗагрузки.Добавить(СтруктураЭлементыОтчета("УвольнениеИзОрганизаций", СтруктураПараметров,
		ТекстОшибки, Отказ));

КонецПроцедуры

Процедура ЗаполнитьТабличныеЧасти_Увольнение(ДокументОбъект, СтруктураПараметров)

	ДокументОбъект.Сотрудники.Очистить();

	Для Каждого СтруктураРаботника Из СтруктураПараметров.РаботникиОрганизации Цикл

		НоваяСтрока = ДокументОбъект.Сотрудники.Добавить();
		НоваяСтрока.ИдентификаторСтрокиСотрудника = СтруктураРаботника.НомерСтроки;
		НоваяСтрока.Сотрудник = НайтиСсылкуПоGUID(СтруктураРаботника.Сотрудник, Справочники.Сотрудники);
		НоваяСтрока.ДатаУвольнения = Дата(СтруктураРаботника.ДатаУвольнения);
		НоваяСтрока.РабочийГодС = Дата(СтруктураРаботника.РабочийГодС);
		НоваяСтрока.РабочийГодПо = Дата(СтруктураРаботника.РабочийГодПо);
		НоваяСтрока.ФизическоеЛицо = НайтиСсылкуПоGUID(СтруктураРаботника.ФизическоеЛицо, Справочники.ФизическиеЛица);
		НоваяСтрока.СтатьяТКРФ = Справочники.ОснованияУвольнения.Статья77п1;
		НоваяСтрока.ДнейКомпенсацииУдержанияОтпуска = СтруктураРаботника.ДнейКомпенсацииУдержанияОтпуска;
		НоваяСтрока.СтатьяТКРФ = Справочники.ОснованияУвольнения.Статья77п1;
		Если ЗначениеЗаполнено(НоваяСтрока.ДнейКомпенсацииУдержанияОтпуска) Тогда
			НоваяСтрока.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные;
		Иначе
			НоваяСтрока.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Константы

Функция КоличествоДнейВГод()
	
	Возврат 28;

КонецФункции

#КонецОбласти

Функция НайтиПоЗначениюРеквизита(Значение, ИмяРеквизита, Менедежер)

	Если ИмяРеквизита = "Код" Тогда

		Значение = Менедежер.НайтиПоКоду(Значение);

	ИначеЕсли ИмяРеквизита = "Наименование" Тогда

		Значение = Менедежер.НайтиПоНаименованию(Значение);

	Иначе

		Значение = Менедежер.НайтиПоРеквизиту(ИмяРеквизита, Значение);

	КонецЕсли;

	Если Значение = Неопределено Тогда

		Значение = Менедежер.ПустаяСсылка();

	КонецЕсли;
	Возврат Значение;

КонецФункции

Функция ЗапросHTTP_GET(Узел, Метод = "", ДанныеЗапроса = Неопределено)

	Отказ = Ложь;
	ТекстОшибки = "";
	ДанныеОтвета = Неопределено;

	Попытка

		Соединение = Новый HTTPСоединение(Узел.Сервер, Узел.Порт, Узел.Пользователь, Узел.Пароль);
		ЗапросHTTP = Новый HTTPЗапрос(Узел.АдресПубликации + Метод);
		ОтветHTTP = Соединение.Получить(ЗапросHTTP);

		СтрокаОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();

		Если ОтветHTTP.КодСостояния = 200 Тогда

			Если Не ПустаяСтрока(СтрокаОтвета) Тогда
				ДанныеОтвета = ЧтениеИзJSON(СтрокаОтвета);
			КонецЕсли;

		Иначе

			ШаблонСообщения = НСтр("ru='Код состояния %1: %2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОтветHTTP.КодСостояния, ?(Не ПустаяСтрока(СтрокаОтвета),
				ЧтениеИзJSON(СтрокаОтвета), ""));

			_ОбменUPPВызовСервера.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстОшибки);

		КонецЕсли;

	Исключение

		_ОбменUPPВызовСервера.ДобавитьСтрокуВТекст(ОписаниеОшибки(), ТекстОшибки);

	КонецПопытки;

	Если Отказ Тогда

		ДанныеОтвета = Неопределено;

		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

//@skip-warning
Функция ЗапросHTTP_POST(Узел, Метод = "", ДанныеЗапроса = Неопределено)

	Отказ = Ложь;
	ТекстОшибки = "";
	ДанныеОтвета = Неопределено;

	Попытка

		Соединение = Новый HTTPСоединение(Узел.Сервер, Узел.Порт, Узел.Пользователь, Узел.Пароль);
		ЗапросHTTP = Новый HTTPЗапрос(Узел.АдресПубликации + Метод);

		Если Не ДанныеЗапроса = Неопределено Тогда
			ЗапросHTTP.УстановитьТелоИзСтроки(ЗаписьВJSON(ДанныеЗапроса), КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;

		ОтветHTTP = Соединение.ОтправитьДляОбработки(ЗапросHTTP);

		СтрокаОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();

		Если ОтветHTTP.КодСостояния = 200 Тогда

			Если Не ПустаяСтрока(СтрокаОтвета) Тогда
				ДанныеОтвета = ЧтениеИзJSON(СтрокаОтвета);
			КонецЕсли;

		Иначе

			ШаблонСообщения = НСтр("ru='Код состояния %1: %2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОтветHTTP.КодСостояния, ?(Не ПустаяСтрока(СтрокаОтвета),
				ЧтениеИзJSON(СтрокаОтвета), ""));

			_ОбменUPPВызовСервера.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстОшибки);

		КонецЕсли;

	Исключение

		_ОбменUPPВызовСервера.ДобавитьСтрокуВТекст(ОписаниеОшибки(), ТекстОшибки);

	КонецПопытки;

	Если Отказ Тогда

		ДанныеОтвета = Неопределено;

		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

Функция ПроверитьHTTPСервисЗапрос(Запрос, Ответ, Данные, Узел)

	Отказ = Ложь;

	ЭтоHTTPСервисЗапрос = ТипЗнч(Запрос) = Тип("HTTPСервисЗапрос");

	Если ЭтоHTTPСервисЗапрос Тогда

		Данные = ЧтениеИзJSON(Запрос.ПолучитьТелоКакСтроку("UTF-8"));

		Если ТипЗнч(Данные) = Тип("Структура") Тогда

			Узел = УзелОтправки(_ОбменUPPВызовСервера.глЗначениеСтруктуры(Данные, ИмяКодУзла(), ""), Ответ, Отказ);

		Иначе

			Ответ = ОтветHTTPОшибка(НСтр("ru='Неверный формат данных.'"), Отказ);

		КонецЕсли;

	Иначе

		Ответ = ОтветHTTPОшибка(НСтр("ru='Не корректный запрос HTTP сервиса.'"), Отказ);

	КонецЕсли;

	Возврат Не Отказ;

КонецФункции

Функция УзелОтправки(КодУзла, Ответ, Отказ)

	Узел = ПланыОбмена._ОбменUPP.НайтиПоКоду(КодУзла);

	Если Не ЗначениеЗаполнено(Узел) Тогда

		ШаблонСообщения = НСтр("ru='Не найден узел ""%1"" в базе источнике'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, КодУзла);

		Ответ = ОтветHTTPОшибка(ТекстСообщения, Отказ);

	КонецЕсли;

	Возврат Узел;

КонецФункции

Функция ОтветHTTPОшибка(ТекстОшибки, Отказ = Ложь)

	Отказ = Истина;

	Возврат ОтветHTTP(402, ТекстОшибки);

КонецФункции

Функция ОтветHTTP(КодСостояния, Данные = Неопределено)

	Ответ = Новый HTTPСервисОтвет(КодСостояния);

	Если Не Данные = Неопределено Тогда

		ДанныеJSON = ЗаписьВJSON(Данные);

		Ответ.Заголовки.Вставить("Content-type", "application/JSON; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(ДанныеJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	КонецЕсли;

	Возврат Ответ;

КонецФункции

Функция ЗаписьВJSON(Данные)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ЧтениеИзJSON(Данные)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);
	Попытка
		ПрочитанныеДанные = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ПрочитанныеДанные = Данные;
	КонецПопытки;

	Возврат ПрочитанныеДанные;

КонецФункции

Функция НайтиСоздатьОбъектПоGUID(GUID, Менеджер)

	СсылкаGUID = НайтиСсылкуПоGUID(GUID, Менеджер);
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаGUID) Тогда
		ОбъектСсылки = СсылкаGUID.ПолучитьОбъект();
	Иначе
		ОбъектМетоданных = Метаданные.НайтиПоТипу(ТипЗнч(Менеджер));
		Если Метаданные.Справочники.Содержит(ОбъектМетоданных) Тогда
			ОбъектСсылки = Менеджер.СоздатьЭлемент();
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетоданных) Тогда
			ОбъектСсылки = Менеджер.СоздатьДокумент();
		КонецЕсли;
		ОбъектСсылки.ОбменДанными.Загрузка = Истина;
		ОбъектСсылки.УстановитьСсылкуНового(СсылкаGUID);
	КонецЕсли;

	Возврат ОбъектСсылки;

КонецФункции

Функция НайтиСсылкуПоGUID(GUID, Менеджер)

	Если GUID = "" Или ЭтоПустойУИД(GUID) Тогда
		Ссылка = Менеджер.ПустаяСсылка();
	Иначе
		Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(GUID));
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

Функция СтруктураОтчетаЗагрузкиПоУмолчанию()

	Структура = Новый Структура;
	Структура.Вставить(ИмяКодУзла(), ПланыОбмена._ОбменUPP.ЭтотУзел().Код);

	Возврат Структура;

КонецФункции

Функция СтруктураЭлементаОтчетаЗагрузкиПоУмолчанию()

	Структура = Новый Структура;
	Структура.Вставить("Ссылка", "");
	Структура.Вставить("УспешныйОбмен", Ложь);
	Структура.Вставить("ТекстОтвета", "");

	Возврат Структура;

КонецФункции

Функция ИмяКодУзла()

	Возврат "КодУзла";

КонецФункции

Функция СтруктураЭлементыОтчета(СинонимОбъекта, СтруктураПараметров, ТекстОшибки, Отказ)

	ТекстОтвета = "";

	ТекстОшибкиПриЗагрузке = ТекстОшибкиПриЗагрузке();

	Если Не ПустаяСтрока(ТекстОшибкиПриЗагрузке) Тогда

		ШаблонСообщения = Нстр("ru='Объект %1: %2 (GUID %3)'");
		ТекстОтвета = СтрШаблон(ШаблонСообщения, СинонимОбъекта, _ОбменUPPВызовСервера.глЗначениеСтруктуры(
			СтруктураПараметров, "Представление"), _ОбменUPPВызовСервера.глЗначениеСтруктуры(СтруктураПараметров,
			"Ссылка"));

		_ОбменUPPВызовСервера.ДобавитьСтрокуВТекст(ТекстОшибкиПриЗагрузке, ТекстОтвета);

	КонецЕсли;

	_ОбменUPPВызовСервера.ДобавитьСтрокуВТекст(ТекстОтвета, ТекстОшибки);

	СтруктураОтчета = СтруктураЭлементаОтчетаЗагрузкиПоУмолчанию();
	СтруктураОтчета.Ссылка = _ОбменUPPВызовСервера.глЗначениеСтруктуры(СтруктураПараметров, "Ссылка");
	СтруктураОтчета.УспешныйОбмен = Не Отказ;
	СтруктураОтчета.ТекстОтвета = ТекстОтвета;

	Возврат СтруктураОтчета;

КонецФункции

Функция ТекстОшибкиПриЗагрузке()

	ТекстОшибки = "";

	_ОбменUPPВызовСервера.ДобавитьСообщенияПользователюВТекстОшибки(ТекстОшибки, Истина);

	Возврат ТекстОшибки;

КонецФункции

Функция ЭтоПустойУИД(GUID)
	
	Возврат GUID = "00000000-0000-0000-0000-000000000000";
	
КонецФункции

Функция НайтиСтруктураПоЗначение(МассивСтруктур, Ключ, Значение)

	Результат = Неопределено;
	Для Каждого Структура Из МассивСтруктур Цикл
		Если Структура[Ключ] = Значение Тогда
			Результат = Структура;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти